// üìå D√©claration d'une classe appel√©e "Formulaire".
// Une classe, c'est comme un mod√®le ou une bo√Æte √† outils qui permet
// de cr√©er et manipuler des objets sp√©cifiques (ici, un formulaire).
export default class Formulaire {

    // üìå Le "constructeur" est une fonction sp√©ciale qui s'ex√©cute
    // automatiquement quand on cr√©e un nouvel objet bas√© sur cette classe.
    constructor(id) {
        // On stocke l'ID du formulaire (qu'on doit lui donner dans le HTML).
        this.id = id;

        // On r√©cup√®re l'√©l√©ment HTML qui correspond √† cet ID.
        this.formulaireHtml = document.getElementById(this.id);

        // On stocke les donn√©es du formulaire (c'est une fa√ßon pratique de les manipuler).
        this.formdata = new FormData(this.formulaireHtml);

        // On cr√©e un tableau vide qui va contenir les r√©ponses du formulaire.
        this.answers = new Array();
    }

    // üìå Cette m√©thode sert √† r√©cup√©rer le "parent" d'un √©l√©ment HTML (souvent un <div> qui l'entoure).
    getDiv(id) {
        return document.getElementById(id).parentNode;
    }

    // üìå Cette m√©thode permet de r√©cup√©rer un √©l√©ment HTML gr√¢ce √† son ID.
    getElement(id) {
        return document.getElementById(id);
    }

    // üìå Cette m√©thode sert √† cacher un champ du formulaire (sans animation).
    maskChamp(id) {
        // On ajoute une classe CSS appel√©e "masque" pour cacher l'√©l√©ment.
        this.getDiv(id).classList.add('masque');

        // On rend le champ non obligatoire (il n'est plus n√©cessaire de le remplir).
        this.getElement(id).required = false;
    }

    // üìå Cette m√©thode permet d'afficher un champ du formulaire.
    showChamp(id) {
        // On enl√®ve une classe CSS qui cachait l'√©l√©ment.
        this.getDiv(id).classList.remove('disp');

        // On ajoute une classe CSS qui l'affiche.
        this.getDiv(id).classList.add('app');

        // On rend ce champ obligatoire (il doit √™tre rempli).
        this.getElement(id).required = true;
    }

    // üìå Cette m√©thode permet de cacher un champ avec une animation.
    hideChamp(id) {
        // On enl√®ve la classe qui affichait l'√©l√©ment.
        this.getDiv(id).classList.remove('app');

        // On ajoute une classe CSS qui cache l'√©l√©ment avec animation.
        this.getDiv(id).classList.add('disp');

        // On rend ce champ non obligatoire.
        this.getElement(id).required = false;
    }

    // üìå Cette m√©thode sert √† v√©rifier si un bouton radio est s√©lectionn√©.
    isSelected(id, value, action, otherAction) {
        // On r√©cup√®re les nouvelles valeurs du formulaire.
        this.formdata = new FormData(this.formulaireHtml);

        // On regarde si la valeur du bouton radio correspond √† celle attendue.
        if(this.formdata.get(id) == value) {
            // Si oui, on ex√©cute l'action donn√©e.
            action();
        }
        else {
            // Sinon, on ex√©cute une autre action.
            otherAction();
        }
    }

    // üìå Cette m√©thode r√©cup√®re toutes les valeurs du formulaire et les stocke.
    getAnswers() {
        // On r√©cup√®re √† nouveau toutes les donn√©es du formulaire.
        this.formdata = new FormData(this.formulaireHtml);

        // Pour chaque valeur trouv√©e, on l'ajoute √† notre tableau "answers".
        this.formdata.forEach(
            (value, key) => {
                // On v√©rifie que la valeur n'est ni vide ni "on" (pour √©viter les cases √† cocher non coch√©es).
                if(value != "" && value != "on") {
                    this.answers.push([key, value]);
                }
            }
        )

        // On renvoie le tableau contenant toutes les r√©ponses du formulaire.
        return this.answers;
    }

    // üìå Cette m√©thode affiche toutes les r√©ponses du formulaire dans une bo√Æte d'alerte.
    affAnswers() {
        // On cr√©e une cha√Æne de texte qui va contenir toutes les r√©ponses.
        let chaine = "R√©capitulatif\n\n";

        // On parcourt toutes les r√©ponses r√©cup√©r√©es.
        for (let ligne of this.getAnswers()) {
            // On ajoute chaque r√©ponse sous la forme : "nom_du_champ : valeur"
            chaine += `${ligne[0]} : ${ligne[1]}\n`;
        }

        // On affiche le r√©capitulatif dans une alerte.
        alert(chaine);
    }
}
